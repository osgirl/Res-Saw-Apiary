FORMAT: 1A
HOST: https://dev01-res.meccabingo.com/

# RES.API.SAW - Draft

Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface.

# Group Authentication and Security service

RES API authentication uses OpenID connect for identity, aligned with the [OAuth2](http://oauth.net/2/) protocol. 

Clients will be issued with a `client_id` and `client_secret` that must be provided for token requests. 

<a name="tokens"></a>
## Tokens

All requests to RES resources require the client application to provide an appropriate access token. These tokens are provided in the Authorization header as Bearer tokens. e.g.

```
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSIsImtpZCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSJ9.eyJjbGllbnRfaWQiOiJiZWRlLWdyb3N2ZW5vci1jbXMiLCJzY29wZSI6InJlYWRfZ3Jvc3Zlbm9ybG95YWx0eSIsImlzcyI6Imh0dHBzOi8vaWRzcnYzLmNvbSIsImF1ZCI6Imh0dHBzOi8vaWRzcnYzLmNvbS9yZXNvdXJjZXMiLCJleHAiOjE0MzU5Mzk5NzQsIm5iZiI6MTQzNTkzOTYxNH0.nGLoo8B_enlzdY2OX_sf0d1IEGbAUOL8E_-Dl94owI_rnxRrtvumz6fIGx8L5hTXzl8-GlM0Edfb3fe9cD49JDUbWuh0fYnBTjj4SnALv6DSmYSFHeDBkbbbzwI4QVuERblfeGB04ZAEDCjZlLoL4uly-lE8Oq2E150R83u43i8zDfYqKpPp1D5rvhOvdnOg4q3coICHqGkFzsg_0wfEwaYUgc2AWCuyy7ry4pEnV8cg7BVA3GOldkY5jsE062SP4T-N-UjzKd3Lz1KG0bBYZPfJ2CwV2oTgTnwEAkubIqdfYLm_bXMz8sQwm4I_V22qMDhavYwYBhFp1vQdWoYD2A
```

### Token validation
Access tokens are fully signed [Json Web Tokens](http://jwt.io/) and should be validated by the client. Many libraries exist for all platforms that support validating tokens. The details of RES's authentication certificates used to sign token are documented below under the core resoure.

<a name="client-credentials-access-token"></a>
## Client Credentials Access Token
The provided token is utilised for resources where no player session is required, currently this token flow is used for all API end points.

**Example request**

`client_id:client_secret` Base64 encoded, e.g. `YmVkZS1ncm9zdmVub3ItY21zOnNlY3JldA==` and passed in the `Authorization` header

```
POST /api/core/connect/token HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Authorization: Basic YmVkZS1ncm9zdmVub3ItY21zOnNlY3JldA==
Body: grant_type=client_credentials&scope=res
```

**Example response**

```
{
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSIsImtpZCI6ImEzck1VZ01Gdjl0UGNsTGE2eUYzekFrZnF1RSJ9.eyJjbGllbnRfaWQiOiJiZWRlLWdyb3N2ZW5vci1jbXMiLCJzY29wZSI6InJlYWRfZ3Jvc3Zlbm9ybG95YWx0eSIsImlzcyI6Imh0dHBzOi8vaWRzcnYzLmNvbSIsImF1ZCI6Imh0dHBzOi8vaWRzcnYzLmNvbS9yZXNvdXJjZXMiLCJleHAiOjE0MzU5Mzk5NzQsIm5iZiI6MTQzNTkzOTYxNH0.nGLoo8B_enlzdY2OX_sf0d1IEGbAUOL8E_-Dl94owI_rnxRrtvumz6fIGx8L5hTXzl8-GlM0Edfb3fe9cD49JDUbWuh0fYnBTjj4SnALv6DSmYSFHeDBkbbbzwI4QVuERblfeGB04ZAEDCjZlLoL4uly-lE8Oq2E150R83u43i8zDfYqKpPp1D5rvhOvdnOg4q3coICHqGkFzsg_0wfEwaYUgc2AWCuyy7ry4pEnV8cg7BVA3GOldkY5jsE062SP4T-N-UjzKd3Lz1KG0bBYZPfJ2CwV2oTgTnwEAkubIqdfYLm_bXMz8sQwm4I_V22qMDhavYwYBhFp1vQdWoYD2A",
    "expires_in": 600,
    "token_type": "bearer"
}
```

### Token expiration

The access tokens have an expiration time defined in the token claims and duplicated for simplicity in the response body. After `expires_in` seconds, clients applications will need to make another client credentials request to get a new access token for subsequent operations requiring a client access token.

<a name="resource-owner-access-token"></a>
## Resource Owner Access Token
Resource owner access tokens are required to access resources where an authenticated customer is expected. Note that to generate a resource owner access token, client credentials should also be supplied using the Authorization header as shown. 

**Example request**

`client_id:client_secret` Base64 encoded, e.g. 98712389abc and passed in the Authorization header

**channel** - One of the following values: `retail`, `digital`. If not specified then defaults to `retail`.

**username** - Username of the resource owner (customer) for `digital` or card number for `retail`.

**password** - Password of the resource owner (customer) for `digital` or PIN for `retail`.

**venue_id** - Identifier of a venue where a call to RES comes from. Always required.

**game_category** - The game category (e.g. slots, table game). Required for certain scopes (see [Scopes](#scopes) table below).

**location_id** - Identifier of a device/machine calling RES. Always required.

**staff_id** - Identifier of a member of staff calling RES. Required only when a member of staff initiates an API call (see [Scopes](#scopes) table below).

```
POST /api/core/connect/token
Content-Type: application/x-www-form-urlencoded
Authorization: Basic 98712389abc
```

```
grant_type=password
&scope=res
&channel=retail
&username=<cardno/username>
&password=<pin/password>
&venue_id=50601
&game_category=slot
&location_id=XT101
&staff_id=cashier4
```

**Example response**

```
{
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.ew0KICAiY2xpZW50X2lkIjogInJlcyIsDQogICJzY29wZSI6IFsNCiAgICAic3BpbmUiLA0KICAgICJzaXRlY29kZSINCiAgXSwNCiAgInN1YiI6ICI2Mzk3MTk5MTk4MzUwMjU0MTIiLA0KICAiR2FtZVRva2VuIjogIldzMkY3a1NwMmRaWlZHWlRNWU1yRU1yYVJ5QXFwU1BDS2ZHWUl6SFhFbXVjNUM5dzdVYlM0dk5zZFIwa01LUlV1SDVpRWdwSWI2LVd0REpVMkMwQlliTDROZXlGRGpTVW9namtiMjY5RGF3MSIsDQogICJhbXIiOiAicGFzc3dvcmQiLA0KICAiYXV0aF90aW1lIjogMTQyOTI4NjE5NywNCiAgImlkcCI6ICJpZHNydiIsDQogICJpc3MiOiAiaHR0cDovL2V3MS1xYTAxLTUwMS5jbG91ZGFwcC5uZXQ6ODg4OC9jb3JlIiwNCiAgImF1ZCI6ICJodHRwOi8vZXcxLXFhMDEtNTAxLmNsb3VkYXBwLm5ldDo4ODg4L2NvcmUvcmVzb3VyY2VzIiwNCiAgImV4cCI6IDE0MjkyODY3OTgsDQogICJuYmYiOiAxNDI5Mjg2MTk4DQp9.eqvm-4vOF6s7Iwpqfd01qa4ZkwSMkQiVgNFNCqdjX-hX843pUtGTM2XdEIBwvwf4OxldptRtYl5gdAcChXJcZf2TLXhxnznP4uPMQsvEXlm3qy44uHXj8phlEsQELC2CydcVUa-C6sZV0RXJ-QNfUo2sGQQwnX7rWP19Byf-Z6QzmaJFkSWU8yOl45qxfSu3XDmf4GyQpBPnn5YBi8FWuK7R2QSBdK3JFlQ9VvHyk7QeDQhfMg1OJdP1JfbXbi_V3WN3cD700hx_f2f_mVS6o_VYEHBh9IPb7wsCcSfR33BKKlXFUraKdttIwYjQL-frEmpOzI2mQDGg2de_PodU-w",
    "expires_in": 600,
    "token_type": "bearer",
    "refresh_token": "1cf75ed7e40723b64bbe29eb2f2654b8"
}
```

## Resource Owner Access Token Refresh

Resource owner access tokens have an expiration time defined both in the response above and inside the token claims, shown in seconds. Unlike the client credentials access token, resource owner tokens provide a specific refresh operation to allow the client application to extend the life of the session without requiring customer authentication details to be resupplied.

**Example Request**

```
POST /api/connect/token
Content-Type: application/x-www-form-urlencoded
Authorization: Basic 98712389abc

grant_type=refresh_token
&refresh_token=1cf75ed7e40723b64bbe29eb2f2654b8
```

**Example Response**

```
{
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Im5kcnRheVk3c0tuSjZSY3ZCRjlLZl9BU3B0SSIsImtpZCI6Im5kcnRheVk3c0tuSjZSY3ZCRjlLZl9BU3B0SSJ9.eyJjbGllbnRfaWQiOiJ0Y3MiLCJzY29wZSI6WyJnYW1lVG9rZW4iLCJvZmZsaW5lX2FjY2VzcyIsInNpdGVjb2RlIiwic3BpbmUiXSwic3ViIjoiNjQ0MTM5MTk1ODYxOTY2ODQ4IiwiYW1yIjoicGFzc3dvcmQiLCJhdXRoX3RpbWUiOjE0NDI1MDQxMTUsImlkcCI6Imlkc3J2IiwiZ2FtZVRva2VuIjoiRExlZS0zNHhuNDBxcEowVWpZUzRWV1VIdFQzY2Zmb05oOU1qVjcxRVNocWJ6QVBBRjUyWWdnX2I4ZmZjT0JvbUVaRDdScnVzNlg3X3YxZ0dHeXNlNnRvNWIwTEs2S2otWmhZa2xjMGlSelkxIiwic2l0ZWNvZGUiOiJncm9zdmVub3JjYXNpbm9zLmNvbSIsImlzcyI6Imh0dHA6Ly9ldzEtcWEwMS01MDEtaWxiLmFkLmJlZGVnYW1pbmcuY29tOjg4ODgvY29yZSIsImF1ZCI6Imh0dHA6Ly9ldzEtcWEwMS01MDEtaWxiLmFkLmJlZGVnYW1pbmcuY29tOjg4ODgvY29yZS9yZXNvdXJjZXMiLCJleHAiOjE0NDI1MDQ0MTUsIm5iZiI6MTQ0MjUwNDExNX0.NW3YVYwmdibBYkRgx1TveOVBDA3-x7W9D_R3tkL5-DOgiTEbirVeDH6kC4Pwy2oBbJyZhxK4pzyIbynm2LjeWtf36qn_JW40UX0POJX7WTv4J-HHja2ExB2xCmvPMpQtv1V9GnuHz7yuxMr_IdNrBfedfFiwtmf2j2AILQsgjvsDLjr2U7MSyyGozwRRvtbU6ZkOm6zNxAonblDtmlPZmFvlJ8p8EZ-f37s9Vyc_-oDgF8qm5AQpvjrII7OsIMeWbaJtjmf6EgSjzeDnXaIvmdlo_RNozIcLDCmndXbLRmhLiJ5_r1aEGJXqvmZPXU1J5Sx7i2XbS2q5koLfVmYRNA",
    "expires_in": 600,
    "token_type": "bearer",
    "refresh_token": "2cd75ed7e40723b64bbe29eb2f2654b8"
}
```

<a name="scopes"></a>
## Scopes

In order to access any resource provided by RES, the client should provide a token of a certain type obtained for appropriate scopes.
The relation between resources and allowed scopes is reflected in each endpoint's description.
The following table explains what should be supplied as a part of auth server request in order to get a token with a particular scope issued.

|Authentication type|Token type|Required parameters|Available scopes|
|-------------------|----------|-------------------|----------------|
|Read-only operations|Client Credentials Token|clientId <br/>clientSecret |readonlyCustomerLookup <br/>readonlyCustomerSearch|
|Member of staff performing an operation|Client Credentials Token|clientId <br/>clientSecret <br/>venue_id <br/>location_id <br/>staff_id |staffSetAccountSuspension <br/>staffRemoveAccountSuspension <br/>staffRemoveSelfExclusion <br/>staffWalletGetBalance <br/>staffUpdateCustomerPersonal <br/>staffUpdateCustomerComms <br/>staffUpdateCustomerPopf <br/>staffRegisterRetailCustomer <br/>staffUpgradeCustomer <br/>staffWalletGetTransactionStatus <br/> staffWalletRegisterWinnings|
|Customer performing action themselves in a venue|Resource Owner Token|clientId <br/>clientSecret <br/>venue_id <br/>location_id <br/>game_category <br/>cardNo <br/>pin |clientChangePin <br/>clientWalletWithdraw <br/>clientWalletDeposit <br/>clientWalletGetBalance|
|Staff operating on behalf of a customer|Resource Owner Token|clientId <br/>clientSecret <br/>venue_id <br/>location_id <br/>staff_id <br/>cardNo <br/>pin |onbehalfWalletWithdraw <br/>onbehalfWalletDeposit <br/>onbehalfSetSelfExclusion <br/>onbehalfRequestChangePin <br/>onbehalfAddCard <br/>onbehalfUpdateCard|

## Authentication flow

The following diagram depicts the sequence of interactions between client and the main RES components in context of authentication process:

![Authentication flow](https://rankgroup.atlassian.net/wiki/download/attachments/102989835/Authentication%20flow.png?api=v2)

(1) - The client requests [an access token](#tokens) from Identity Provider (IDP).
The type of the token (see [Client Credentials Access Token](#client-credentials-access-token),
[Resource Owner Access Token](#resource-owner-access-token)) and parameters to be
supplied depend on the [scopes](#scopes) required to perform an operation over a resource.

(2) - Token of the requested type is issued by IDP and returned to the client.

(3) - The client calls RES API.
The obtained token must be supplied to the request as `Authorization` HTTP header.

(4) - RES communicates to IDP, in order to validate the token provided by the client.

(5) - IDP responds with the token validation result.
If token is expired, compromised or revoked then the result will be negative, otherwise positive.

(6) - Once the token is validated, RES carries on processing the client's request and responds accordingly.


# Group Customer Service V 1.0
This end point is a dedicated aggregated endpoint for Customer services.
This endpoint is a replacement for the existing Grosvenor Customer look service provided by RES v1 API. BEDE uses this API to look customer's retail profile when they chose to join the website. This version of the API includes IsSawCustomer flag, BEDE use this flag to determine whether to present customer with the "digital conversion" journey or not

## Profile [/customer/v1/profile]

Model for the resource if defined below:
| Name                  | Type      | Required       | Description                                                                          |Example        |
|:---                   |:---       |:---            |:---                                                                                  |:---           |
|Name.Title             |string[25] |**yes**         |Mr, Mrs, Miss, ...                                                                    |"Mr"           |
|Name.Forename          |string[40] |**yes**         |                                                                                      |"John"         |
|Name.MiddleName        |string[40] |**optional**    |                                                                                      |"Dan"          |
|Name.Surname           |string[40] |**yes**         |                                                                                      |"Jackson"      |
|Address.Address1       |string[?]  |**yes**         |                                                                                      |"Flat 2, 10 Downing Street"        |
|Address.Town           |string[?]  |**yes**         |                                                                                      |"London"       |
|Address.Postcode       |string[?]  |**yes**         |                                                                                      |"WC2B 4AA"     |
|Address.County         |string[?]  |**optional**    |                                                                                      |"Greater London"                   |
|Address.Country        |string[2]  |**yes**         |ISO 2 digit country code ie. AU, NZ, ZA, GB, US                                       |"GB"           |
|ContactDetails.HomePhone                   |string[?]  |**optional**                                                                       |"01234567890"  |
|ContactDetails.BusinessPhone               |string[?]  |**optional**                                                                       |"01234567890"  |
|ContactDetails.MobilePhone                 |string[?]  |**optional** Either Mobile or Email must be supplied                               |"01234567890"  |
|ContactDetails.Email                       |string[?]  |**optional** Either Mobile or Email must be supplied                               |"<john@email.com>"                 |
|ContactDetails.IsHomeContactallowed        |bool       |**optional**   |Allow postal communication channel                                 |true           |
|ContactDetails.IsMobileContactAllowed      |bool       |**optional**   |Allow mobile phone communication channel                           |true           |
|ContactDetails.IsEmailContactAllowed       |bool       |**optional**   |Allow email communication channel                                  |true           |
|ContactDetails.IsSMSContactAllowed         |bool       |**optional**   |Allow SMS communication channel                                    |true           |
|Nationality                                |string[2]  |**yes**        |ISO 2 digit country code ie. AU, NZ, ZA, GB, US                                        |"ZA"           |
|Gender                                     |string[7]  |**yes**        |Values are Unknown, Female and Male                                                    |"Male"         |
|Occupation                                 |string[40] |**optional**   |                                                                                       |"Clerk"        |
|DateOfBirth                                |string     |**yes**        |                                                                                       |"1955-01-30"   |
|PopfAcceptanceDate                         |datetime   |**optional**   |                                                                                       |"2016-04-23"   |
|IsVerified                                 |bool       |**yes**        |                                                                                       |true           |
|SelfExclusion.Digital                      |array      |**optional**   |if customer has decided to self-exclude from the digital channel                       |true           |
|SelfExclusion.Digital.From                 |datetime   |**optional**   |if customer has decided to self-exclude from the digital channel                       |true           |
|SelfExclusion.Digital.To                   |datetime   |**optional**   |if customer has decided to self-exclude from the digital channel                       |true           |
|SelfExclusion.Retail                       |array      |**optional**   |if customer has decided to self-exclude from the retail channel                        type |true           |
|SelfExclusion.Retail.From                  |datetime   |**optional**   |if customer has decided to self-exclude from the retail channel                        |true           |
|SelfExclusion.Retail.To                    |datetime   |**optional**   |if customer has decided to self-exclude from the retail channel                        |true           |
|Suspension.Global                          |array      |**optional**   |if customer is suspended from the casino globally                                      |true           |
|Suspension.Global.Reason                   |string     |**optional**   |if customer is suspended from the casino globally                                      |true           |
|Suspension.Global.From                     |datetime   |**optional**   |if customer is suspended from the casino globally                                      |true           |
|Suspension.Global.To                       |datetime   |**optional**   |if customer is suspended from the casino globally                                      |true           |
|Suspension.Local                           |array      |**optional**   |if customer is suspended from the casino locally                                       |true           |
|Suspension.Local.CasinoId                  |long       |**optional**   |                                                                                       |true           |
|Suspension.Local.Reason                    |string     |**optional**   |                                                                                       |true           |
|Suspension.Local.From                      |datetime   |**optional**   |                                                                                       |true           |
|Suspension.Local.To                        |datetime   |**optional**   |                                                                                       |true           |
|CustomerNumber                             |string[?]  |**yes**        |                                                                                       
|MembershipCards                            |array      |**yes**        | 2 dimentional array, holds membership CardNumber and Status                                                                                        
|MembershipCards.CardNumber                 |string     |**yes**        | 123456789
|MembershipCards.Status                     |string     |**optional**   | Active

For registration following input validation in place

**Following fields must follow a valid format:**
- Email address - valid email format
- ContactDetails.HomePhone,BusinessPhone & MobilePhone - starts with 0 or +, followed by 9/10 digits, it allows optional spacing between digits to conform the popular/acceptable format (i.e. 078 8602 8945, +44 78 8602 9845, etc)
- Address.Postcode - valid UK postcode for UK addresses
- DateOfBirth - must be of legal age (18)


## Lookup Customer Profile
### Scope: readonlyCustomerLookup [GET /customer/v1/profile/{customernumber}]
This customer endpoint can be expanded with Membership cards, Account status and Additional details. Multiple expands can be included, for example /profile/12345?expand=cards,status,additional
+ Parameters
    + customernumber: 123456 (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 200 (application/json)

        {
            "Name" : {
                "Title" : "Mr",
                "Forename" : "John",
                "MiddleName" : "Dan",
                "Surname" : "Jackson"
                },
             "Address" : {
                "Address1" : "10 Downing Street",
                "Town" : "London",
                "Postcode" : "WC2B 4AA",
                "County" : "Greater London",
                "Country"  : "UK"
                },
            "ContactDetails" : {
                "HomePhone" : "01234567890",
                "BusinessPhone" : "01234567890",
                "MobilePhone" : "01234567890",
                "Email" : "john@email.com",
                "IsHomeContactallowed" : true,
                "IsMobileContactAllowed" : true,
                "IsEmailContactAllowed" : true,
                "IsSMSContactAllowed" : true
                },
            "ClubNumber" : "45611",
            "CustomerNumber" : "12345678",
        }
            
+ Response 404 (application/json)

        {
            "Message": "Customer Not Found"
        }
            
+ Response 500 (application/json)

        {
            "Message": "Internal Error"
        }


### Profile with Membership Cards [GET /customer/v1/profile/{customernumber}?{expand}=cards]

+ Parameters
    + customernumber: 123456 (string, required)
    + expand: `cards` - provides profile along with membership cards

    
+ Response 200 

            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                },
                 "Address" : {
                    "Address1" : "10 Downing Street",
                    "Town" : "London",
                    "Postcode" : "WC2B 4AA",
                    "County" : "Greater London",
                    "Country"  : "UK"
                },
                "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "john@email.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                },
                "ClubNumber" : "45611",
                "CustomerNumber" : "12345678",
                "MembershipCards" : [
                    {
                        "CardNumber" : 123456789,
                        "Status": "Active"
                    },
                    {
                        "CardNumber" : 789456123,
                        "Status": "Lost"
                    }
                ]
            }
            

### Profile with Account Status [GET /customer/v1/profile/{customernumber}?{expand}=status]

+ Parameters
    + customernumber: 123456 (string, required)
    + expand:`status` - provides profile along with account status
    
+ Response 200 

            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                },
                "Address" : {
                    "Address1" : "10 Downing Street",
                    "Town" : "London",
                    "Postcode" : "WC2B 4AA",
                    "County" : "Greater London",
                    "Country"  : "UK"
                },
                "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "john@email.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                },
                "ClubNumber" : "45611",
                "CustomerNumber" : "12345678",
                "AccountStatus" : {
                    "IsVerified" : true,
                    "SelfExclusion" : {
                        "Digital" : {
                            "From" : "2016-01-01",
                            "To" : "2016-06-01"
                        },
                        "Retail" : {
                            "From" : "2010-03-10",
                            "To" : "2010-09-10"
                        }
                    },
                    "Suspension" : {
                        "Global" : {
                            "Reason": "Bad behaviour",
                            "From" : "2016-09-01",
                            "To" : "2016-11-01"
                        },
                        "Local" : [
                            {
                                "CasinoId" : 55000,
                                "Reason": "Bad behaviour",
                                "From" : "2016-01-30",
                                "To" : "2016-02-28"
                            },
                            {
                                "CasinoId" : 55001,
                                "Reason": "Bad behaviour",
                                "From" : "2016-06-15",
                                "To" : "2016-06-30"
                            }
                        ]
                    }
                }
            }   

### Profile with Additional Details [GET /customer/v1/profile/{customernumber}?{expand}=additional]

+ Parameters
    + customernumber: 123456 (string, required)
    + expand:`additional` - provides profile along with additional details
    
+ Response 200 

            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                },
                "Address" : {
                    "Address1" : "10 Downing Street",
                    "Town" : "London",
                    "Postcode" : "WC2B 4AA",
                    "County" : "Greater London",
                    "Country"  : "UK"
                },
                "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "john@email.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                },
                "ClubNumber" : "45611",
                "CustomerNumber" : "12345678",
                "Nationality" : "GB",
                "Gender" : "Male",
                "Occupation" : "Clerk",
                "DateOfBirth" : "1955-01-30",
                "PopfAcceptanceDate" : "2016-09-12"
            }

## Search Username [/customer/v1/profile/?username={Username}]

### Scope: readonlyCustomerSearch [GET]

+ Parameters
    + Username: 123456 (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 200 (application/json)

         {
            "Name" : {
                "Title" : "Mr",
                "Forename" : "John",
                "MiddleName" : "Dan",
                "Surname" : "Jackson"
                },
             "Address" : {
                "Address1" : "10 Downing Street",
                "Town" : "London",
                "Postcode" : "WC2B 4AA",
                "County" : "Greater London",
                "Country"  : "UK"
                },
            "ContactDetails" : {
                "HomePhone" : "01234567890",
                "BusinessPhone" : "01234567890",
                "MobilePhone" : "01234567890",
                "Email" : "john@email.com",
                "IsHomeContactallowed" : true,
                "IsMobileContactAllowed" : true,
                "IsEmailContactAllowed" : true,
                "IsSMSContactAllowed" : true
                },
            "ClubNumber" : "45611",
            "CustomerNumber" : "12345678",
        }
            
+ Response 204 (application/json)

+ Response 500 (application/json)

        {
            "Message": "Internal Error"
        }
           
          
## Open Search [/customer/v1/profile/?{surname}=Jackson&{dateOfBirth}=1955-01-03&{email}=jack@johnson.com&{postcode}=WC2B+4AA&{mobile}=07123456789&{cardNo}=12345&{checkAlreadyUsed}=true&{max}=10]
### Scope: readonlyCustomerSearch [GET]

+ Parameters
    + surname: `Jackson` (string, required)
    + dateOfBirth: `1955-01-30` (dateTime, required) - Date of birth of the Customer
    + postcode: `WC2B 4AA` (string, optional) - Customers' postcode
    + email: `jack@johnson.com` (string, optional) - Customers' email address
    + mobile: `07123456789` (string, optional) - Customers mobile number
    + cardNo: `12345` (number, required) - Card number (Number found on the back of the card) of the Customer in form of an integer
    + checkAlreadyUsed: true (boolean, optional) - Enables Customer Spine registration check. 
        The flag modifies response entity according to the following rules:
        - customer registered on Spine, adds _IsAlreadyUsedOnDigital_ property with value _true_
        - customer not registered - adds _IsAlreadyUsedOnDigital_ property with value _false_
        - Spine check failed - no changes to response
    + max: 10 (int, optional) - Max records to return

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 200 (application/json)

        [
            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                },
                "Address": {
                    "Address1": "10 Downing Street",
                    "Town": "London",
                    "Postcode": "WC2B 4AA",
                    "County": "Greater London",
                    "Country": "UK"
                 },
                 "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "jack@rank.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                 },
                "DateOfBirth" : "1955-01-30",
                "Gender" : "Male",
                "ClubNumber" : "45611",
                "CustomerNumber" : "12345678",
            },
            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "Will",
                    "MiddleName" : "Sam",
                    "Surname" : "Smith"
                },
                "Address": {
                    "Address1": "10 Grosvenor Street",
                    "Town": "London",
                    "Postcode": "WC2B 1BD",
                    "County": "Greater London",
                    "Country": "UK"
                 },
                 "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "jack@rank.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                 },
                "DateOfBirth" : "1955-01-30",
                "Gender" : "Male",
                "ClubNumber" : "45631",
                "CustomerNumber" : "32145678",
            }
        ]
        
+ Response 200 (application/json)

        []

+ Response 500 (application/json)

        {
            "Message": "Internal Error"
        }
        
## Register [/customer/v1/profile/retailOnly]


### Scope: staffRegisterRetailCustomer [POST]

+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (client credential token)
    
    + Body
    
             {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                    },
                 "Address" : {
                    "Address1" : "10 Downing Street",
                    "Town" : "London",
                    "Postcode" : "WC2B 4AA",
                    "County" : "Greater London",
                    "Country"  : "UK"
                    },
                "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "john@email.com",
                    "IsHomeContactallowed" : true,
                    "IsMobileContactAllowed" : true,
                    "IsEmailContactAllowed" : true,
                    "IsSMSContactAllowed" : true
                    },
                "Nationality" : "GB",
                "Gender" : "Male",
                "Occupation" : "Clerk",
                "DateOfBirth" : "1955-01-30",
                "ClubNumber" : "45611",
                "AccountStatus" : {
                    "IsVerified" : true
                },
                "CustomerNumber" : "12345678",
                "MembershipCardNumber" : 67890
            }
            

+ Response 201 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Invalid fields"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }

## Upgrade [/customer/v1/multichannel/{customernumber}]

### Scope: staffUpgradeCustomer [POST]

This API will be called when a customer has an existing retail or digital accounts. If a customer has a digital account then the player id should be supplied. The player id can be obtained by performaing a username search.

+ Parameters
    + customernumber: 12345678 (string, required)

+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (client credential token)

    + Body
    
            {
                "DigitalProfile": {
                    "PlayerId": "123456789",
                    "Name" : {
                        "Title" : "Mr",
                        "Forename" : "John",
                        "MiddleName" : "Dan",
                        "Surname" : "Jackson"
                    },
                     "Address" : {
                        "Address1" : "10 Downing Street",
                        "Town" : "London",
                        "Postcode" : "WC2B 4AA",
                        "County" : "Greater London",
                        "Country"  : "UK"
                    },
                    "ContactDetails" : {
                        "HomePhone" : "01234567890",
                        "BusinessPhone" : "01234567890",
                        "MobilePhone" : "01234567890",
                        "Email" : "john@email.com",
                        "IsHomeContactallowed" : true,
                        "IsMobileContactAllowed" : true,
                        "IsEmailContactAllowed" : true,
                        "IsSMSContactAllowed" : true
                    },
                    "Nationality": "GB",
                    "Gender": "Male",
                    "Occupation": "Clerk",
                    "DateOfBirth": "1955-01-30",
                    "ClubNumber": "45611",
                    "AccountStatus" : {
                        "IsVerified" : true
                    },
                    "MembershipCardNumber" : 67890
                },
                "Security": {
                    "Pin": 1234
                }
            }

+ Response 201 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Invalid fields"
            }
            
+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }
            

## Update Personal Details [/customer/v1/profile/{customernumber}/personal]

### Scope: staffUpdateCustomerPersonal [PATCH]

Api to update an existing customers information once they have been identified as a SAW customer.

+ Parameters
    + customernumber: 12345678 (string, required)
    
+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (resource owner token)

    + Body
    
            {
                "Name" : {
                    "Title" : "Mr",
                    "Forename" : "John",
                    "MiddleName" : "Dan",
                    "Surname" : "Jackson"
                },
                "Address" : {
                    "Address1" : "10 Downing Street",
                    "Town" : "London",
                    "Postcode" : "WC2B 4AA",
                    "County" : "Greater London",
                    "Country"  : "UK"
                },
                "ContactDetails" : {
                    "HomePhone" : "01234567890",
                    "BusinessPhone" : "01234567890",
                    "MobilePhone" : "01234567890",
                    "Email" : "john@email.com"
                },
                "Nationality" : "GB",
                "Gender" : "Male",
                "Occupation" : "Clerk",
                "DateOfBirth" : "1955-01-30"
            }

+ Response 200 (application/json)

+ Response 404 (application/json)

            {
                "Message": "Customer not found"
            }
            
+ Response 400 (application/json)

            {
                "Message": "Invalid fields"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }

## Update Communication Permissions [/customer/v1/profile/{customernumber}/communication]

### Scope: staffUpdateCustomerComms [PATCH]

Service endpoint for updating a customers communication permissions, which indicates how Rank may contact them for marketing purposes

+ Parameters
    + customernumber: 12345678 (string, required)
 
+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (resource owner token)   
    
    + Body
    
            {
                "IsMobileContactAllowed": false,
                "IsSMSContactAllowed": true,
                "IsEmailContactAllowed": true,
                "IsHomeContactallowed": false
            }
    
+ Response 200 (application/json)    

## Update PoPF [/customer/v1/profile/{customernumber}/popf]

### Scope: staffUpdateCustomerPopf [PATCH]

This API will be used to update Protection of Player Funds flag as an when is required by the terms.
Neon will get the information about the current PoPF status for the customer in lookup API call (above)
This functionality requires cusotmer to authorise in form of entering their correct PIN for the SAW account. Neon application will be required to generate a Resource owner token for the customer to be able to call this API.

+ Parameters
    + customernumber: 12345678 (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (resource owner token)

+ Response 204 (application/json)

+ Response 404 (application/json)

            {
                "Message": "Customer not found"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

## Customer suspended status [/customer/v1/profile/{customernumber}/suspension/{target}]

### Scope: staffSetAccountSuspension [PUT]

To update customer profile as barred/suspended by the SAW staff member by selecting a reason, and noting the details on why the SAW customer has been barred/suspended, and how long the barring/suspension will exist for.

+ Parameters
    + customernumber: 12345678 (string, required)
    + target: 54321 or 'global' (string, required) - Casino number in case a local suspension, `'global'` target in case of a global suspension

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

    + Body  
            
            {
                "Reason": "Bad behaviour",
                "From": "2016-01-30",
                "To": "2016-01-30"
            }
           
+ Response 204 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }
 
### Scope: staffRemoveAccountSuspension [DELETE]

To update customer profile by removing the barred/suspended status

+ Parameters
    + customernumber: 12345678 (string, required)
    + target: 54321 or 'global' (string, required) - Casino number in case a local suspension, `'global'` target in case of a global suspension

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 204 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

## Set Customer self-exclusion [/customer/v1/profile/{customernumber}/selfExclusion/{target}]

### Scope: onbehalfSetSelfExclusion [POST]

This endpoint is for the purpose of Customer self-exlusion. The minimum amount of time a customer can self exclude is 180days, and they can choose to exclude themselves from digital, retail or the Grosvenor brand

+ Parameters
    + customernumber: 12345678 (string, required)
    + target: 'retail' or 'digital' or 'crossChannel' (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (resource owner token)

    + Body  
            
            {
                "From": "2016-01-30",
                "To": "2016-01-30"
            }
           
            
+ Response 204 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }
 
+ Response 412 (application/json)

            {
                "Message": "Invalid start date or duration"
            }
 
### Scope: staffRemoveSelfExclusion [DELETE]

This will remove a customers self exclusion and should only be performed by Admin staff.

+ Parameters
    + customernumber: 12345678 (string, required)
    + target: 'retail' or 'digital' or 'crossChannel' (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 204 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }
            
## Register New Card [/customer/v1/profile/{customernumber}/membershipCards]

### Scope: onbehalfAddCard [POST]

Allows registered customers to add new or additional cards

+ Parameters
    + customernumber: 12345678 (string, required)
  
+ Request

    + Headers 
            
            Authorization: Bearer (resource owner token)
    + Body
    
            {
                "CardNumber" : 123123123
            }
            
+ Response 200 (application/json)

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }
            
            
## Update Card Status [/customer/v1/profile/{customernumber}/membershipCards/{cardnumber}]

### Scope: onbehalfUpdateCard [PUT]

Allows registered customers to update the card status

+ Parameters
    + customernumber: 12345678 (string, required)
    + cardnumber: 123123123 (string, required)
  
+ Request

    + Headers 
            
            Authorization: Bearer (resource owner token)
    + Body
    
            {
                "Status" : "Lost"
            }
            
+ Response 200 (application/json)

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }
            
            
## Request PIN Change [/customer/v1/profile/{customernumber}/resetpin]

### Scope: onbehalfRequestChangePin [POST]

Allows a member of staff to request a pin change on behalf of the customer. This is for when the customer has forgotten thier current pin. Once requested the customer will complete the journey on their own device.

+ Parameters
    + customernumber: 12345678 (string, required)
   
+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 201 (application/json)

+ Response 400 (application/json)

            {
                "Message": "Account Locked"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }
            
## Change PIN [/customer/v1/profile/{customernumber}/changepin]

### Scope: clientChangePin [POST]

Allows a customer to change there known pin to a new one.

+ Parameters
    + customernumber: 12345678 (string, required)
    
   
+ Request

    + Headers 
            
            Authorization: Bearer (resource owner token)
    + Body 
    
            {
                "PreviousPin" : 1234,
                "NewPin" : 4321
            }

+ Response 201 (application/json)

+ Response 403

    + Body
    
            {
              "Message": "Current PIN is incorrect"
            }
            
+ Response 409

    + Body
    
            {
              "Message": "The new PIN has been used before"
            }

+ Response 412

    + Body
    
            {
              "Message": "PIN Insecure. The PIN must not consist of consecutive digits or digits repeated 4 times"
            }

+ Response 400 (application/json)

            {
                "Message": "Account Locked"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }



# Group Wallet Service V 1.0 - Draft
This end point is a dedicated aggregated endpoint for Wallet services. 

## View Balance [/wallet/v1/customer/{customernumber}/balance]
This API will be return balance from all SAW wallets and their current PoPF status. It will also include funds allowed to be deposited or withdrawn based on limits set for the customer in the F&P tactical solution. 

### Scope: clientWalletGetBalance, staffWalletGetBalance [GET]

When Responsible Gambling limit is not accepted then RemainingResponsibleGamblingLimit equals to null.

+ Parameters
    + customernumber: 12345678 (string, required)

+ Request

    + Headers 
            
            Authorization: Bearer (client credential token)

+ Response 200 (application/json)

            {
                "Balances": {
                    "TotalCash": 1000,
                    "TotalDigital": 500,
                    "TotalRetail": 700,
                    "AvailableToWithdraw": 600,
                    "AvailableToTransferToRetailGame": 0
                },
                "Limits": {
                    "RemainingTacticalWithdrawalLimit": 100,
                    "RemainingTacticalDepositLimit": 350,
                    "RemainingResponsibleGamblingLimit": 0
                },
                "LastCalculatedDateTime": "2016-03-15T14:32:22Z"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer not found"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Couldn't process the transaction. {System X} is unavailable."
            }

## Deposit [/wallet/v1/customer/{customernumber}/deposit/{transactionId}]

### Scope: clientWalletDeposit, onbehalfWalletDeposit [POST]

If the transaction breaches the responsible gambling limits set by customer, then the transaction would faile and RES will return an error message. 
If current request breaches any AML/Fraud deposit limit, RES will store overflow funds to "pending" wallet, this will be mentioned in the response message.
If no limits are set or request within the limits, RES will process the transaction with AML/Fraud engine and limits/balance engine in "all-or-nothing" fashion. 
Any failure will be reported back 500 - server error. 

+ Parameters
    + customernumber: `12345678` (string, required)
    + transactionId: `000000001-001` (string, required)

+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (resource owner token)

    + Body
    
            {
                "Amount": 100
            }

+ Response 204 (application/json)

    Transaction successfully processed
    
    + Body

+ Response 202 (application/json)

    Undetermined state of transaction
    
    + Body

+ Response 400 (application/json)

            {
                "Message": "The specified amount is invalid"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "The latest version of PoPF is not signed off"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Couldn't process the transaction. {System X} is unavailable."
            }

## Withdraw [/wallet/v1/customer/{customernumber}/withdraw/{transactionId}]

###Scope: clientWalletWithdraw, onbehalfWalletWithdraw [POST]

Customer will be asked to authenticate the transaction by entering the PIN number. 
If current request breaches any withdrawal limits, RES will throw and error along with an error message. 
If no limits are set or request within the limits, RES will process the transaction with AML/Fraud engine and limits/balance engine in "all-or-nothing" fashion. 
Any failure will be reported back 500 - server error. 

+ Parameters
    + customernumber: `12345678` (string, required)
    + transactionId: `000000001-001` (string, required)

+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (resource owner token)

    + Body
    
            {
                "Amount": 100
            }

+ Response 204 (application/json)

    Transaction successfully processed
    
    + Body

+ Response 202 (application/json)

    Undetermined state of transaction
    
    + Body

+ Response 400 (application/json)

            {
                "Message": "The requested amount exceeds available funds"
            }

+ Response 400 (application/json)

            {
                "Message": "The requested amount exceeds tactical withdrawal limit"
            }

+ Response 400 (application/json)

            {
                "Message": "The specified amount is invalid"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "The latest version of PoPF is not signed off"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Couldn't process the transaction. {System X} is unavailable."
            }
            
## Register Winnings [/wallet/v1/customer/{customernumber}/winnings/{transactionId}]

###Scope: staffWalletRegisterWinnings [POST]

+ Parameters
    + customernumber: `12345678` (string, required)
    + transactionId: `000000001-001` (string, required)

+ Request (application/json)

    + Headers 
            
            Authorization: Bearer (resource owner token)

    + Body
    
            {
                "ReturnedFunds": 250,
                "Deposit": 40,
                "Winning": 70
            }

+ Response 204 (application/json)

    Transaction successfully processed
    
    + Body

+ Response 202 (application/json)

    Undetermined state of transaction
    
    + Body

+ Response 400 (application/json)

            {
                "Message": "The specified amount is invalid"
            }

+ Response 400 (application/json)

            {
                "Message": "Not a SAW customer"
            }

+ Response 404 (application/json)

            {
                "Message": "Customer Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Couldn't process the transaction. {System X} is unavailable."
            }

## Transaction status [/wallet/v1/transaction/{transactionId}/status]

###Scope: staffWalletGetTransactionStatus [GET]

This api returns log information for the recent transaction based on the transaction id. 

+ Parameters
    + transactionId: `000000001-001` (string, required)

+ Response 200 (application/json)

            {
                "Status": "Succeeded"
            }
            
+ Response 200 (application/json)

            {
                "Status": "Pending"
            }
            
+ Response 200 (application/json)

            {
                "Status": "Undetermined"
            }
            
+ Response 200 (application/json)

            {
                "Status": "Failed"
            }

+ Response 404 (application/json)

            {
                "Message": "Trasaction Not Found"
            }
            
+ Response 500 (application/json)

            {
                "Message": "Internal Error"
            }